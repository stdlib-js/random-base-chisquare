// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-gamma@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";var g=e,h=t,f=n,j=s.isPrimitive,c=r,b=i,v=o,y=m,x=d,w=a,L=l.factory,N=p,E=u;var O=function(){var e,t,n,s,r;if(0===arguments.length)e=L();else if(1===arguments.length&&c(arguments[0]))if(v(n=arguments[0],"prng")){if(!b(n.prng))throw new TypeError(E("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));e=L({prng:n.prng})}else e=L(n);else{if(!j(r=arguments[0]))throw new TypeError(E("invalid argument. First argument must be a positive number. Value: `%s`.",r));if(arguments.length>1){if(!c(n=arguments[1]))throw new TypeError(E("invalid argument. Options argument must be an object. Value: `%s`.",n));if(v(n,"prng")){if(!b(n.prng))throw new TypeError(E("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));e=L(r/2,.5,{prng:n.prng})}else e=L(r/2,.5,n)}else e=L(r/2,.5)}return s=void 0===r?O:u,t=e.PRNG,g(s,"NAME","chisquare"),n&&n.prng?(g(s,"seed",null),g(s,"seedLength",null),f(s,"state",y(null),x),g(s,"stateLength",null),g(s,"byteLength",null),g(s,"toJSON",y(null))):(h(s,"seed",i),h(s,"seedLength",o),f(s,"state",a,l),h(s,"stateLength",m),h(s,"byteLength",d),g(s,"toJSON",p)),g(s,"PRNG",t),s;function i(){return t.seed}function o(){return t.seedLength}function m(){return t.stateLength}function d(){return t.byteLength}function a(){return t.state}function l(e){t.state=e}function p(){var e={type:"PRNG"};return e.name=s.NAME,e.state=N(t.state),e.params=void 0===r?[]:[r],e}function u(){return e()}function O(t){return w(t)||t<=0?NaN:e(t/2,.5)}},P=O(),T=O;e(P,"factory",T);var G=P;export{G as default,T as factory};
//# sourceMappingURL=index.mjs.map
