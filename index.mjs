// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.1.1-esm/index.mjs";import{isPrimitive as s}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.1.1-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.1.1-esm/index.mjs";import{factory as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-gamma@v0.1.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.1.0-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";function g(){var g,h,f,j,c;if(0===arguments.length)g=l();else if(1===arguments.length&&r(arguments[0]))if(o(f=arguments[0],"prng")){if(!i(f.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",f.prng));g=l({prng:f.prng})}else g=l(f);else{if(!s(c=arguments[0]))throw new TypeError(u("invalid argument. First argument must be a positive number. Value: `%s`.",c));if(arguments.length>1){if(!r(f=arguments[1]))throw new TypeError(u("invalid argument. Options argument must be an object. Value: `%s`.",f));if(o(f,"prng")){if(!i(f.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",f.prng));g=l(c/2,.5,{prng:f.prng})}else g=l(c/2,.5,f)}else g=l(c/2,.5)}return j=void 0===c?O:E,h=g.PRNG,e(j,"NAME","chisquare"),f&&f.prng?(e(j,"seed",null),e(j,"seedLength",null),n(j,"state",d(null),m),e(j,"stateLength",null),e(j,"byteLength",null),e(j,"toJSON",d(null))):(t(j,"seed",v),t(j,"seedLength",b),n(j,"state",w,L),t(j,"stateLength",y),t(j,"byteLength",x),e(j,"toJSON",N)),e(j,"PRNG",h),j;function v(){return h.seed}function b(){return h.seedLength}function y(){return h.stateLength}function x(){return h.byteLength}function w(){return h.state}function L(e){h.state=e}function N(){var e={type:"PRNG"};return e.name=j.NAME,e.state=p(h.state),e.params=void 0===c?[]:[c],e}function E(){return g()}function O(e){return a(e)||e<=0?NaN:g(e/2,.5)}}var h=g();e(h,"factory",g);export{h as default,g as factory};
//# sourceMappingURL=index.mjs.map
